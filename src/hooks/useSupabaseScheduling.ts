import { useCallback, useMemo } from 'react';
import { useSchedulingData } from './useSchedulingData';
import { useAppointmentsList } from './useAppointmentsList';
import { usePatientManagement } from './usePatientManagement';
import { useAtomicAppointmentCreation } from './useAtomicAppointmentCreation';
import { useCriticalDataFetch } from './useCriticalDataFetch';
import { clearAllCache } from './useOptimizedQuery';

export function useSupabaseScheduling() {
  // Usar os hooks especializados
  const schedulingData = useSchedulingData();
  const appointmentsList = useAppointmentsList();
  const patientManagement = usePatientManagement();
  const appointmentCreation = useAtomicAppointmentCreation();
  const criticalDataFetch = useCriticalDataFetch();

  // ‚úÖ ESTABILIZAR: Fun√ß√£o de recarregamento consolidada com invalida√ß√£o de cache
  const refetch = useCallback(async () => {
    console.log('üîÑ useSupabaseScheduling: Iniciando refetch consolidado');
    console.log('üö® FOR√áANDO INVALIDA√á√ÉO COMPLETA DO CACHE!');
    
    // Invalidar caches antes do refetch
    appointmentsList.invalidateCache();
    
    // Aguardar um pouco para garantir limpeza do cache
    await new Promise(resolve => setTimeout(resolve, 100));
    
    await Promise.all([
      appointmentsList.forceRefetch(),
      schedulingData.refetch(),
    ]);
  }, [schedulingData.refetch, appointmentsList.refetch, appointmentsList.invalidateCache, appointmentsList.forceRefetch]);

  // üîß SUPER AGRESSIVO: Limpar TUDO ap√≥s cria√ß√£o de agendamento
  const createAppointment = useCallback(async (formData: any, editingAppointmentId?: string, forceConflict = false) => {
    console.log('üéØ useSupabaseScheduling: Iniciando createAppointment');
    console.log('üìã FormData recebido:', formData);
    
    try {
      const result = await appointmentCreation.createAppointment(formData, editingAppointmentId, forceConflict);
      console.log('üìä Resultado do createAppointment:', result);
      
      // ‚úÖ Se h√° sucesso (mesmo que n√£o expl√≠cito), DESTRUIR TUDO
      if (result && result.success !== false) {
        console.log('üö® SUCESSO CONFIRMADO - DESTRUINDO TODO O CACHE!');
        
        // 1. Limpar TODO o cache do sistema
        clearAllCache();
        console.log('üí• Cache TOTALMENTE destru√≠do');
        
        // 2. Aguardar para garantir que dados foram persistidos
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // 3. Buscar dados cr√≠ticos diretamente do banco
        const freshData = await criticalDataFetch.fetchAppointmentsCritical();
        console.log('üî• Dados cr√≠ticos buscados diretamente do banco:', freshData.length, 'agendamentos');
        
        // 4. For√ßar refetch de tudo
        await Promise.all([
          schedulingData.refetch(),
          appointmentsList.forceRefetch()
        ]);
        
        console.log('‚úÖ REFRESH COMPLETO - agendamentos devem aparecer IMEDIATAMENTE');
      } else {
        console.log('‚ö†Ô∏è Resultado indefinido ou falha - N√ÉO invalidando cache');
        console.log('üîç Result details:', JSON.stringify(result, null, 2));
      }
      
      return result;
    } catch (error) {
      console.log('‚ùå Erro capturado - PRESERVANDO cache e formul√°rio:', error);
      throw error; // Repassar erro SEM afetar estado
    }
  }, [appointmentCreation.createAppointment, appointmentsList, schedulingData, criticalDataFetch]);

  // ‚úÖ ESTABILIZAR: Envolver cancelAppointment para usar a funcionalidade existente
  const cancelAppointment = useCallback(async (appointmentId: string) => {
    try {
      await appointmentsList.cancelAppointment(appointmentId);
      // O refetch j√° √© feito automaticamente no useAppointmentsList
    } catch (error) {
      throw error;
    }
  }, [appointmentsList.cancelAppointment]);

  // ‚úÖ ESTABILIZAR: Envolver confirmAppointment para usar a funcionalidade existente
  const confirmAppointment = useCallback(async (appointmentId: string) => {
    try {
      await appointmentsList.confirmAppointment(appointmentId);
      // O refetch j√° √© feito automaticamente no useAppointmentsList
    } catch (error) {
      throw error;
    }
  }, [appointmentsList.confirmAppointment]);

  // ‚úÖ ESTABILIZAR: Envolver unconfirmAppointment para usar a funcionalidade existente
  const unconfirmAppointment = useCallback(async (appointmentId: string) => {
    try {
      await appointmentsList.unconfirmAppointment(appointmentId);
      // O refetch j√° √© feito automaticamente no useAppointmentsList
    } catch (error) {
      throw error;
    }
  }, [appointmentsList.unconfirmAppointment]);

  // üîß FUN√á√ÉO DE TESTE: Criar agendamento para novembro 2025
  const createTestAppointment = useCallback(async () => {
    console.log('üß™ TESTE: Criando agendamento para novembro 2025...');
    
    const testData = {
      nomeCompleto: 'TESTE NOVEMBRO 2025',
      dataNascimento: '1990-01-01',
      convenio: 'Particular',
      telefone: '11999999999',
      celular: '11999999999',
      medicoId: 'b9e24f79-d5b7-4b12-8c2b-9b4d8a6c5e3f', // Dr. Edson
      atendimentoId: '2e5c4a8b-7f3d-4b9e-a2c1-6d8f9e0a1b2c', // Consulta
      dataAgendamento: '2025-11-15',
      horaAgendamento: '10:00',
      observacoes: 'TESTE - Verificar se aparece imediatamente na interface'
    };
    
    try {
      const result = await createAppointment(testData);
      console.log('üß™ TESTE RESULTADO:', result);
      
      // Aguardar um pouco e validar se apareceu
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const novemberAppointments = appointmentsList.appointments.filter(apt => 
        apt.data_agendamento >= '2025-11-01' && apt.data_agendamento <= '2025-11-30'
      );
      
      console.log('üß™ TESTE VALIDA√á√ÉO:', {
        novemberAppointments: novemberAppointments.length,
        testFound: novemberAppointments.some(apt => apt.pacientes?.nome_completo?.includes('TESTE NOVEMBRO'))
      });
      
      return result;
    } catch (error) {
      console.error('üß™ TESTE FALHOU:', error);
      throw error;
    }
  }, [createAppointment, appointmentsList.appointments]);

  // üîç DEBUG: Force refresh function para debug
  const forceRefresh = useCallback(async () => {
    console.log('üîç DEBUG - Forcing complete refresh of all data');
    clearAllCache();
    await Promise.all([
      appointmentsList.forceRefetch(),
      schedulingData.refetch()
    ]);
    console.log('üîç DEBUG - Force refresh completed');
  }, [appointmentsList.forceRefetch, schedulingData.refetch]);

  // ‚úÖ MEMOIZAR: O objeto retornado para garantir refer√™ncias est√°veis
  return useMemo(() => ({
      // Dados
      doctors: schedulingData.doctors,
      atendimentos: schedulingData.atendimentos,
      appointments: appointmentsList.appointments,
      blockedDates: schedulingData.blockedDates,
    
    // Estados de loading - apenas dos dados essenciais (N√ÉO incluir loading de cria√ß√£o para n√£o desmontar a tela durante submiss√£o)
    loading: schedulingData.loading || patientManagement.loading,
    
    // Opera√ß√µes - AGORA TODAS EST√ÅVEIS
    createAppointment,
    cancelAppointment,
    confirmAppointment,
    unconfirmAppointment,
    searchPatientsByBirthDate: patientManagement.searchPatientsByBirthDate, // ‚úÖ J√Å EST√ÅVEL
    
    // Utilit√°rios
    getAtendimentosByDoctor: schedulingData.getAtendimentosByDoctor,
    getAppointmentsByDoctorAndDate: appointmentsList.getAppointmentsByDoctorAndDate,
    isDateBlocked: schedulingData.isDateBlocked,
    getBlockingReason: schedulingData.getBlockingReason,
    getBlockedDatesByDoctor: schedulingData.getBlockedDatesByDoctor,
    
    // Recarregamento - ‚úÖ EXPOR PARA COMPONENTES EXTERNOS
    refetch,
    forceRefresh,
    
    // üß™ TESTE: Fun√ß√£o para criar agendamento de teste
    createTestAppointment,
    
    // üîß CR√çTICO: Valida√ß√£o de dados
    validateDataConsistency: criticalDataFetch.validateDataConsistency,
  }), [
    // Dados
    schedulingData.doctors,
    schedulingData.atendimentos,
    appointmentsList.appointments,
    schedulingData.blockedDates,
    // Estados
    schedulingData.loading,
    patientManagement.loading,
    appointmentCreation.loading,
    // Fun√ß√µes est√°veis
    createAppointment,
    cancelAppointment,
    confirmAppointment,
    unconfirmAppointment,
    patientManagement.searchPatientsByBirthDate,
    schedulingData.getAtendimentosByDoctor,
    appointmentsList.getAppointmentsByDoctorAndDate,
    schedulingData.isDateBlocked,
    schedulingData.getBlockingReason,
    schedulingData.getBlockedDatesByDoctor,
    refetch,
    forceRefresh,
    createTestAppointment,
    criticalDataFetch.validateDataConsistency,
  ]);
}